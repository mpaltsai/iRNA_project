g<- list()
c = 0
for(i in 1:ncol(df1)){
for (k in 1:ncol(df2)){
v1 <- as.matrix(df1)[,i]
v2 <- as.matrix(df2)[,k]
common_genes = intersect(v1, v2)
c = c + 1
g[c]<- list(common_genes)
}
}
g
}
common_genes_targets_genes_batch <- fun2(new_targets, genes_batch)
common_genes_targets_genes_OldProt = fun2(new_targets, genes_OldProt)
common_genes_targets_genes_OldVSall = fun2(new_targets, genes_oldVSall)
#####Fischer's test
my_fishers_test <- function(df1, df2){
f <- c()
for(i in 1:ncol(df1)){
for (k in 1:ncol(df2)){
v1 <- as.matrix(df1)[,i]
v2 <- as.matrix(df2)[,k]
n=20465
f_test <- fisher.test(matrix(c(n-length(union(v1,v2)),   length(setdiff(v1,v2)),
length(setdiff(v2,v1)), length(intersect(v1,v2))), nrow=2),
alternative="greater")$p.value
f<- c(f, f_test)
#print(count_g)
#common_genes
}
}
f
}
fishers_targets_genes_batch <- my_fishers_test(new_targets, genes_batch)
fishers_targets_genes_OldProt = my_fishers_test(new_targets, genes_OldProt)
fishers_targets_genes_OldVSall = my_fishers_test(new_targets, genes_oldVSall)
#p values in total
pvalues=c(fishers_targets_genes_batch,fishers_targets_genes_OldProt,fishers_targets_genes_OldVSall)
p_0.05 = length(pvalues[pvalues<0.05])
cat("comparisons with a p value < 0.05:", p_0.05)
#10
hist(pvalues, main="Density plot of p values",breaks=seq(0,1,0.05), freq=FALSE)
###common genes between files
inter_1 <- intersect(unique(unlist(new_targets)), unique(unlist(genes_batch)))
if (inter_1=="") {inter_1=0}
###else print(length(unique(inter_1[!is.na(inter_1) & !inter_1==""])))
cat("common genes between GeneLists_1_2_4-8 and New_targets:")
length(unique(inter_1[!is.na(inter_1) & !inter_1==""]))
inter_2 <- intersect(unique(unlist(new_targets)), unique(unlist(genes_OldProt)))
if (inter_2=="") {inter_2=0}
cat("common genes between GeneLists_1_2_4-8 and Frog_Clusters:")
length(unique(inter_2[!is.na(inter_2) & !inter_2==""]))
inter_3 <- intersect(unique(unlist(new_targets)), unique(unlist(genes_oldVSall)))
if (inter_3=="") {inter_3=0}
cat("common genes between GeneLists_1_2_4-8 and ChipSeq:")
length(unique(inter_3[!is.na(inter_3) & !inter_3==""]))
#p values adjustment with Bonferroni method
pvalues_bonf <- p.adjust(pvalues,method="bonferroni")
p_0.05_bonf = length(pvalues_bonf[pvalues_bonf<0.05])
cat("comparisons with an adjusted (Bonferroni method) p value < 0.05:", p_0.05_bonf)
hist(pvalues_bonf, main="Density plot of adjusted (Bonferroni method) p values",breaks=seq(0,1,0.05), freq=FALSE)
mean_bonf = mean(pvalues_bonf)
cat("mean of adjusted (Bonferroni method) p values:", mean_bonf)
#p values adjustment with Benjamini Hochberg method
pvalues_fdr <- p.adjust(pvalues,method="fdr")
p_0.05_fdr = length(pvalues_fdr[pvalues_fdr<0.05])
cat("comparisons with an adjusted (Benjamini_Hochberg method) p value < 0.05:", p_0.05_fdr)
hist(pvalues_fdr, main="Density plot of adjusted (Benjamini-Hochberg method) p values",breaks=seq(0,1,0.05), freq=FALSE )
mean_fdr = mean(pvalues_fdr)
cat("mean of adjusted (Benjamini-Hochberg method) p values:", mean_fdr)
#install.packages("qvalue")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("qvalue")
library(qvalue)
qobj <-qvalue(pvalues, pi0 = 1)
q_0.05 = length(qobj$qvalues[qobj$qvalues<0.05])
cat("comparisons with a q value < 0.05:", q_0.05)
#hist(qobj)
hist(qobj$qvalues, main="Density plot of q values", breaks=seq(0,1,0.05), freq=FALSE)
mean_qval = mean(qobj$qvalues)
cat("mean of q values:", mean_qval)
###Write results to files
#check if the directory exists and if not create it
ifelse(!dir.exists(file.path(getwd(),"sigificant_genesets/")), dir.create(file.path(getwd(),"sigificant_genesets/")), FALSE)
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),"Erf_",analysis ,"_New_targets.csv")
###GeneLists vs new_targets#####################################
max_genes_batch_comparisons <- max(count_genes_targets_genes_batch) #it is 71
common1 = sapply (common_genes_targets_genes_batch, function (x) {length (x) <- max_genes_batch_comparisons; return (x)})
#labels for columnwise comparisons
labels1= c()
for(i in 1:ncol(new_targets)){
for (k in 1:ncol(genes_batch)){
label = paste(colnames(new_targets)[i], " versus ", colnames(genes_batch)[k])
labels1 = c(labels1, label)
labels1
}
}
#labels, pvalues and common genes in one matrix
l_genes_batch_comparisons = dim_new_targets[2]*dim_genes_batch[2]
final1 = rbind(labels1, fishers_targets_genes_batch, pvalues_bonf[1:l_genes_batch_comparisons], pvalues_fdr[1:l_genes_batch_comparisons], qobj$qvalues[1:l_genes_batch_comparisons], common1)
#final1 <- rbind(matrix(data=unlist(strsplit(final1[1,], " v ")), nrow=2,ncol=320), final1[-1,])
#split header back to 4 rows
DF1 <- read.table(text=final1[1,], sep ="_", as.is = TRUE)
final_new_targets_genes_batch = rbind(t(DF1),  final1[-1,])
write.table(final_new_targets_genes_batch, f.path, sep=",", na="")
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),"Erf_",analysis,"_Frog_clusters.csv")
###GeneLists vs Frog_Clusters##########################
max_genes_OldProt_comparisons <- max(count_genes_targets_genes_OldProt) #it is 71
common2 = sapply (common_genes_targets_genes_OldProt, function (x) {length (x) <- max_genes_OldProt_comparisons; return (x)})
#labels for columnwise comparisons
labels2= c()
for(i in 1:ncol(new_targets)){
for (k in 1:ncol(genes_OldProt)){
label = paste(colnames(new_targets)[i], " versus ", colnames(genes_OldProt)[k])
labels2 = c(labels2, label)
labels2
}
}
#labels, pvalues and common genes in one matrix
l_genes_OldProt_comparisons = dim_new_targets[2]*dim_genes_OldProt[2]
final2 = rbind(labels2, fishers_targets_genes_OldProt,      pvalues_bonf[(l_genes_batch_comparisons+1):(l_genes_batch_comparisons+l_genes_OldProt_comparisons)],
pvalues_fdr[(l_genes_batch_comparisons+1):(l_genes_batch_comparisons+l_genes_OldProt_comparisons)],
qobj$qvalues[(l_genes_batch_comparisons+1):(l_genes_batch_comparisons+l_genes_OldProt_comparisons)],
common2)
#split header back to 6 rows
DF2 <- read.table(text=final2[1,], sep = "_", as.is = TRUE)
final_new_targets_genes_OldProt = rbind(t(DF2), final2[-1,])
write.table(final_new_targets_genes_OldProt, f.path, sep=",", na="")
###GeneLists vs ChIPseq################################
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),"Erf_", analysis, "_vs_ChIPseq.csv")
max_genes_OldVSall_comparisons <- max(count_genes_targets_genes_OldVSall)
common3 = sapply (common_genes_targets_genes_OldVSall, function (x) {length (x) <- max_genes_OldVSall_comparisons; return (x)})
#labels for columnwise comparisons
labels3= c()
for(i in 1:ncol(new_targets)){
for (k in 1:ncol(genes_oldVSall)){
label = paste(colnames(new_targets)[i], " versus ", colnames(genes_oldVSall)[k])
labels3 = c(labels3, label)
labels3
}
}
#labels, pvalues and common genes in one matrix
l_genes_OldVSall_comparisons <- dim_new_targets[2]*dim_genes_OldVSall[2]
final3 = rbind(labels3,
fishers_targets_genes_OldVSall,
pvalues_bonf[(l_genes_batch_comparisons+l_genes_OldProt_comparisons+1):length(pvalues)],
pvalues_fdr[(l_genes_batch_comparisons+l_genes_OldProt_comparisons+1):length(pvalues)],
qobj$qvalues[(l_genes_batch_comparisons+l_genes_OldProt_comparisons+1):length(pvalues)],
common3)
#split header back to 6 rows
DF3 <- read.table(text=final3[1,], sep = "_", as.is = TRUE)
final_new_targets_genes_OldVSall = rbind(t(DF3), final3[-1,])
write.table(final_new_targets_genes_OldVSall, f.path, sep=",", na="")
#write.table(final_new_targets_genes_OldVSall[,545:1088], "final_GeneLists_1_2_4-8_genes_OldVSall_part2.csv", sep=",", na="")
#merge 3 last files to proceed with analysis
#df1 = cbind("id"=rownames(genes_OldProt),genes_OldProt)
#df2 = cbind("id"=rownames(genes_batch),genes_batch)
#df3 = cbind("id"=rownames(genes_oldVSall), genes_oldVSall)
#genes <- merge(df1,df2,by="id",all.x=T, all.y=T)
#genes <- merge(genes,df3,by="id",all.x=T, all.y=T)
#genes <- genes[, -1]
#rm(list=ls())
all_labels <- c(labels1, labels2, labels3)
max_rows <- max(max_genes_batch_comparisons, max_genes_OldProt_comparisons, max_genes_OldVSall_comparisons)
common1 <- apply (common1, 2, function (x) {length (x) <- max_rows; return (x)})
common2 <- apply (common2, 2, function (x) {length (x) <- max_rows; return (x)})
common3 <- apply (common3, 2, function (x) {length (x) <- max_rows; return (x)})
all_common <- cbind(common1, common2, common3)
sign_p_values_index <- which(pvalues<0.05)
pvalues_mat <- matrix(pvalues, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
pvalues_bonf_mat <- matrix(pvalues_bonf, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
pvalues_fdr <- matrix(pvalues_fdr, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
qvalues_mat <- matrix(qobj$qvalues, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
sign_new_targets <- rbind(labels(pvalues_mat[,sign_p_values_index]), all_labels[sign_p_values_index],pvalues_mat[,sign_p_values_index],  pvalues_bonf[sign_p_values_index], pvalues_fdr[sign_p_values_index], qobj$qvalues[sign_p_values_index],  all_common[,sign_p_values_index])
dimnames(sign_new_targets) <- list(c("Gene list", "Comparison", "pvalue", "Bonferroni correction", "BH correction", "q values", "common genes", rep("", dim(sign_new_targets)[1]-7)), c(1:length(sign_p_values_index)))
dim(sign_new_targets)
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),dataset.name, "_", mitoRatio, "_sign_GeneLists_ERF_",analysis,".csv")
write.table(sign_new_targets, f.path, sep=",", na="")
#Common genes with an fdr<0.05
sign_fdr_index <-  which(pvalues<0.05 & pvalues_fdr<0.05)
sign_common <- all_common[,sign_fdr_index]
sign_common_mat <- rbind( labels(pvalues_mat[,sign_fdr_index]), all_labels[sign_fdr_index], sign_common)
dimnames(sign_common_mat) <- list(c("Gene list", "Comparison", "common genes", rep("", dim(sign_new_targets)[1]-7)), c(1:length(sign_fdr_index)))
#sign_fdr_genes <- unique(sign_common[,!is.na(sign_common) & !sign_common==""])
#sign_fdr_genes
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),dataset.name, "_", mitoRatio, "_sign_fdr_genes_ERF_",analysis,".csv")
write.table(sign_common_mat, f.path, sep=",", na="")
#sign_matrix <- matrix(data=unlist(strsplit(sign_new_targets[1,], " versus ")), nrow=2,ncol=10)
#rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
getwd()
#load(file = "GeneLists_work_space.RData")
rm(list=ls())
analysis = "POS"
#Set parameters
dataset.name = 'frog'
mitoRatio = 0.03
setwd("/home/ismini/Documents/RNA_cor/iRNA/input-data")
####read files
#read frog file and call it genes_OldProt
genes_OldProt <- read.csv("Frog_Clusters.csv", sep=",", header = T)
dim_genes_OldProt <- dim(genes_OldProt)
cat("dimensions of Frog_Clusters file:")
dim_genes_OldProt
genes_OldProt <- apply(genes_OldProt, 2, toupper)
genes_OldProt <- as.data.frame(genes_OldProt)
#New_Targets.csv: read the 2 first rows as header and call it genes_batch
header2 <- sapply(read.csv("New_Targets.csv", header=F, sep=",",
check.names=FALSE, nrow=2) , paste, collapse="_")
genes_batch <- read.csv("New_Targets.csv", sep=",", header = F,
check.names=FALSE, skip=2, col.names=header2)
dim_genes_batch <- dim(genes_batch)
cat("dimensions of New_Targets.csv file:")
dim_genes_batch
genes_batch <- apply(genes_batch, 2, toupper)
genes_batch <- as.data.frame(genes_batch)
#ChIPseq_genes.csv: read the 2 first rows as header and call it genes_oldVSall
header3 <- sapply(read.csv("ChIPseq_genes.csv", header=F, sep=",",
check.names=FALSE, nrow=2) , paste, collapse="_")
genes_oldVSall <- read.csv("ChIPseq_genes.csv", sep=",", header = F,
check.names=FALSE, skip=2, col.names=header3)
dim_genes_OldVSall <- dim(genes_oldVSall)
cat("dimensions of ChIPseq_genes.csv:")
dim_genes_OldVSall
genes_oldVSall <- apply(genes_oldVSall, 2, toupper)
genes_oldVSall <- as.data.frame(genes_oldVSall)
if(analysis == "ALL"){
#read Erf file
label_rows = 6
gene_data = read.csv("/home/ismini/Documents/RNA_cor/iRNA/frog/mito_3/kendall/ERF/ERF_0.03_frog.csv", header=F, sep=",", check.names=FALSE, nrow=label_rows)
header0 <- apply(as.matrix(gene_data[1:6,1]) ,2,  paste, collapse="_")
new_targets = read.csv("/home/ismini/Documents/RNA_cor/iRNA/frog/mito_3/kendall/ERF/ERF_0.03_frog.csv", sep=",", header = F,check.names=FALSE, skip=label_rows)
}
if(analysis == "NEG"){
#read negative correlated genes to ERF
label_rows = 6
gene_data = read.csv("/home/ismini/Documents/RNA_cor/iRNA/frog/mito_3/kendall/ERF/ERF_neg.cor_0.03_frog.csv", header=F, sep=",", check.names=FALSE, nrow=label_rows)
header0 <- apply(as.matrix(gene_data[1:6,1]) ,2,  paste, collapse="_")
new_targets = read.csv("/home/ismini/Documents/RNA_cor/iRNA/frog/mito_3/kendall/ERF/ERF_neg.cor_0.03_frog.csv", sep=",", header = F,check.names=FALSE, skip=label_rows)
}
if(analysis == "POS"){
#read positive correlated genes to ERF
label_rows = 6
gene_data = read.csv("/home/ismini/Documents/RNA_cor/iRNA/frog/mito_3/kendall/ERF/ERF_pos.cor_0.03_frog.csv", header=F, sep=",", check.names=FALSE, nrow=label_rows)
header0 <- apply(as.matrix(gene_data[1:6,1]) ,2,  paste, collapse="_")
new_targets = read.csv("/home/ismini/Documents/RNA_cor/iRNA/frog/mito_3/kendall/ERF/ERF_pos.cor_0.03_frog.csv", sep=",", header = F,check.names=FALSE, skip=label_rows)
}
#keep only the first column that keeps the gene names
new_targets = new_targets[,1, drop = FALSE]
colnames(new_targets) = header0
dim_new_targets <- dim(new_targets)
cat("dimensions of New_Targets file:")
dim_new_targets
#upper case to genes strings
new_targets <- apply(new_targets, 2, toupper)
new_targets <- as.data.frame(new_targets)
fun <- function(df1, df2){
l <- c()
g<- list()
c = 0
for(i in 1:ncol(df1)){
for (k in 1:ncol(df2)){
v1 <- as.matrix(df1)[,i]
v2 <- as.matrix(df2)[,k]
common_genes = intersect(v1, v2)
count_g = length(common_genes)
l<- c(l, count_g)
c = c + 1
g[c]<- list(common_genes)
#print(count_g)
#common_genes
}
}
l
#common_genes
#g
}
count_genes_targets_genes_batch = fun(new_targets, genes_batch)
count_genes_targets_genes_OldProt = fun(new_targets, genes_OldProt)
count_genes_targets_genes_OldVSall = fun(new_targets, genes_oldVSall)
###list of common genes
fun2 <- function(df1, df2){
g<- list()
c = 0
for(i in 1:ncol(df1)){
for (k in 1:ncol(df2)){
v1 <- as.matrix(df1)[,i]
v2 <- as.matrix(df2)[,k]
common_genes = intersect(v1, v2)
c = c + 1
g[c]<- list(common_genes)
}
}
g
}
common_genes_targets_genes_batch <- fun2(new_targets, genes_batch)
common_genes_targets_genes_OldProt = fun2(new_targets, genes_OldProt)
common_genes_targets_genes_OldVSall = fun2(new_targets, genes_oldVSall)
#####Fischer's test
my_fishers_test <- function(df1, df2){
f <- c()
for(i in 1:ncol(df1)){
for (k in 1:ncol(df2)){
v1 <- as.matrix(df1)[,i]
v2 <- as.matrix(df2)[,k]
n=20465
f_test <- fisher.test(matrix(c(n-length(union(v1,v2)),   length(setdiff(v1,v2)),
length(setdiff(v2,v1)), length(intersect(v1,v2))), nrow=2),
alternative="greater")$p.value
f<- c(f, f_test)
#print(count_g)
#common_genes
}
}
f
}
fishers_targets_genes_batch <- my_fishers_test(new_targets, genes_batch)
fishers_targets_genes_OldProt = my_fishers_test(new_targets, genes_OldProt)
fishers_targets_genes_OldVSall = my_fishers_test(new_targets, genes_oldVSall)
#p values in total
pvalues=c(fishers_targets_genes_batch,fishers_targets_genes_OldProt,fishers_targets_genes_OldVSall)
p_0.05 = length(pvalues[pvalues<0.05])
cat("comparisons with a p value < 0.05:", p_0.05)
#10
hist(pvalues, main="Density plot of p values",breaks=seq(0,1,0.05), freq=FALSE)
###common genes between files
inter_1 <- intersect(unique(unlist(new_targets)), unique(unlist(genes_batch)))
if (inter_1=="") {inter_1=0}
###else print(length(unique(inter_1[!is.na(inter_1) & !inter_1==""])))
cat("common genes between GeneLists_1_2_4-8 and New_targets:")
length(unique(inter_1[!is.na(inter_1) & !inter_1==""]))
inter_2 <- intersect(unique(unlist(new_targets)), unique(unlist(genes_OldProt)))
if (inter_2=="") {inter_2=0}
cat("common genes between GeneLists_1_2_4-8 and Frog_Clusters:")
length(unique(inter_2[!is.na(inter_2) & !inter_2==""]))
inter_3 <- intersect(unique(unlist(new_targets)), unique(unlist(genes_oldVSall)))
if (inter_3=="") {inter_3=0}
cat("common genes between GeneLists_1_2_4-8 and ChipSeq:")
length(unique(inter_3[!is.na(inter_3) & !inter_3==""]))
#p values adjustment with Bonferroni method
pvalues_bonf <- p.adjust(pvalues,method="bonferroni")
p_0.05_bonf = length(pvalues_bonf[pvalues_bonf<0.05])
cat("comparisons with an adjusted (Bonferroni method) p value < 0.05:", p_0.05_bonf)
hist(pvalues_bonf, main="Density plot of adjusted (Bonferroni method) p values",breaks=seq(0,1,0.05), freq=FALSE)
mean_bonf = mean(pvalues_bonf)
cat("mean of adjusted (Bonferroni method) p values:", mean_bonf)
#p values adjustment with Benjamini Hochberg method
pvalues_fdr <- p.adjust(pvalues,method="fdr")
p_0.05_fdr = length(pvalues_fdr[pvalues_fdr<0.05])
cat("comparisons with an adjusted (Benjamini_Hochberg method) p value < 0.05:", p_0.05_fdr)
hist(pvalues_fdr, main="Density plot of adjusted (Benjamini-Hochberg method) p values",breaks=seq(0,1,0.05), freq=FALSE )
mean_fdr = mean(pvalues_fdr)
cat("mean of adjusted (Benjamini-Hochberg method) p values:", mean_fdr)
#install.packages("qvalue")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("qvalue")
library(qvalue)
qobj <-qvalue(pvalues, pi0 = 1)
q_0.05 = length(qobj$qvalues[qobj$qvalues<0.05])
cat("comparisons with a q value < 0.05:", q_0.05)
#hist(qobj)
hist(qobj$qvalues, main="Density plot of q values", breaks=seq(0,1,0.05), freq=FALSE)
mean_qval = mean(qobj$qvalues)
cat("mean of q values:", mean_qval)
###Write results to files
#check if the directory exists and if not create it
ifelse(!dir.exists(file.path(getwd(),"sigificant_genesets/")), dir.create(file.path(getwd(),"sigificant_genesets/")), FALSE)
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),"Erf_",analysis ,"_New_targets.csv")
###GeneLists vs new_targets#####################################
max_genes_batch_comparisons <- max(count_genes_targets_genes_batch) #it is 71
common1 = sapply (common_genes_targets_genes_batch, function (x) {length (x) <- max_genes_batch_comparisons; return (x)})
#labels for columnwise comparisons
labels1= c()
for(i in 1:ncol(new_targets)){
for (k in 1:ncol(genes_batch)){
label = paste(colnames(new_targets)[i], " versus ", colnames(genes_batch)[k])
labels1 = c(labels1, label)
labels1
}
}
#labels, pvalues and common genes in one matrix
l_genes_batch_comparisons = dim_new_targets[2]*dim_genes_batch[2]
final1 = rbind(labels1, fishers_targets_genes_batch, pvalues_bonf[1:l_genes_batch_comparisons], pvalues_fdr[1:l_genes_batch_comparisons], qobj$qvalues[1:l_genes_batch_comparisons], common1)
#final1 <- rbind(matrix(data=unlist(strsplit(final1[1,], " v ")), nrow=2,ncol=320), final1[-1,])
#split header back to 4 rows
DF1 <- read.table(text=final1[1,], sep ="_", as.is = TRUE)
final_new_targets_genes_batch = rbind(t(DF1),  final1[-1,])
write.table(final_new_targets_genes_batch, f.path, sep=",", na="")
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),"Erf_",analysis,"_Frog_clusters.csv")
###GeneLists vs Frog_Clusters##########################
max_genes_OldProt_comparisons <- max(count_genes_targets_genes_OldProt) #it is 71
common2 = sapply (common_genes_targets_genes_OldProt, function (x) {length (x) <- max_genes_OldProt_comparisons; return (x)})
#labels for columnwise comparisons
labels2= c()
for(i in 1:ncol(new_targets)){
for (k in 1:ncol(genes_OldProt)){
label = paste(colnames(new_targets)[i], " versus ", colnames(genes_OldProt)[k])
labels2 = c(labels2, label)
labels2
}
}
#labels, pvalues and common genes in one matrix
l_genes_OldProt_comparisons = dim_new_targets[2]*dim_genes_OldProt[2]
final2 = rbind(labels2, fishers_targets_genes_OldProt,      pvalues_bonf[(l_genes_batch_comparisons+1):(l_genes_batch_comparisons+l_genes_OldProt_comparisons)],
pvalues_fdr[(l_genes_batch_comparisons+1):(l_genes_batch_comparisons+l_genes_OldProt_comparisons)],
qobj$qvalues[(l_genes_batch_comparisons+1):(l_genes_batch_comparisons+l_genes_OldProt_comparisons)],
common2)
#split header back to 6 rows
DF2 <- read.table(text=final2[1,], sep = "_", as.is = TRUE)
final_new_targets_genes_OldProt = rbind(t(DF2), final2[-1,])
write.table(final_new_targets_genes_OldProt, f.path, sep=",", na="")
###GeneLists vs ChIPseq################################
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),"Erf_", analysis, "_vs_ChIPseq.csv")
max_genes_OldVSall_comparisons <- max(count_genes_targets_genes_OldVSall)
common3 = sapply (common_genes_targets_genes_OldVSall, function (x) {length (x) <- max_genes_OldVSall_comparisons; return (x)})
#labels for columnwise comparisons
labels3= c()
for(i in 1:ncol(new_targets)){
for (k in 1:ncol(genes_oldVSall)){
label = paste(colnames(new_targets)[i], " versus ", colnames(genes_oldVSall)[k])
labels3 = c(labels3, label)
labels3
}
}
#labels, pvalues and common genes in one matrix
l_genes_OldVSall_comparisons <- dim_new_targets[2]*dim_genes_OldVSall[2]
final3 = rbind(labels3,
fishers_targets_genes_OldVSall,
pvalues_bonf[(l_genes_batch_comparisons+l_genes_OldProt_comparisons+1):length(pvalues)],
pvalues_fdr[(l_genes_batch_comparisons+l_genes_OldProt_comparisons+1):length(pvalues)],
qobj$qvalues[(l_genes_batch_comparisons+l_genes_OldProt_comparisons+1):length(pvalues)],
common3)
#split header back to 6 rows
DF3 <- read.table(text=final3[1,], sep = "_", as.is = TRUE)
final_new_targets_genes_OldVSall = rbind(t(DF3), final3[-1,])
write.table(final_new_targets_genes_OldVSall, f.path, sep=",", na="")
#write.table(final_new_targets_genes_OldVSall[,545:1088], "final_GeneLists_1_2_4-8_genes_OldVSall_part2.csv", sep=",", na="")
#merge 3 last files to proceed with analysis
#df1 = cbind("id"=rownames(genes_OldProt),genes_OldProt)
#df2 = cbind("id"=rownames(genes_batch),genes_batch)
#df3 = cbind("id"=rownames(genes_oldVSall), genes_oldVSall)
#genes <- merge(df1,df2,by="id",all.x=T, all.y=T)
#genes <- merge(genes,df3,by="id",all.x=T, all.y=T)
#genes <- genes[, -1]
#rm(list=ls())
all_labels <- c(labels1, labels2, labels3)
max_rows <- max(max_genes_batch_comparisons, max_genes_OldProt_comparisons, max_genes_OldVSall_comparisons)
common1 <- apply (common1, 2, function (x) {length (x) <- max_rows; return (x)})
common2 <- apply (common2, 2, function (x) {length (x) <- max_rows; return (x)})
common3 <- apply (common3, 2, function (x) {length (x) <- max_rows; return (x)})
all_common <- cbind(common1, common2, common3)
sign_p_values_index <- which(pvalues<0.05)
pvalues_mat <- matrix(pvalues, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
pvalues_bonf_mat <- matrix(pvalues_bonf, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
pvalues_fdr <- matrix(pvalues_fdr, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
qvalues_mat <- matrix(qobj$qvalues, nrow=1, dimnames=(list("1", c(rep("New_targets",l_genes_batch_comparisons), rep("Frog_Clusters", l_genes_OldProt_comparisons), rep("ChIPseq", l_genes_OldVSall_comparisons) )) ))
sign_new_targets <- rbind(labels(pvalues_mat[,sign_p_values_index]), all_labels[sign_p_values_index],pvalues_mat[,sign_p_values_index],  pvalues_bonf[sign_p_values_index], pvalues_fdr[sign_p_values_index], qobj$qvalues[sign_p_values_index],  all_common[,sign_p_values_index])
dimnames(sign_new_targets) <- list(c("Gene list", "Comparison", "pvalue", "Bonferroni correction", "BH correction", "q values", "common genes", rep("", dim(sign_new_targets)[1]-7)), c(1:length(sign_p_values_index)))
dim(sign_new_targets)
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),dataset.name, "_", mitoRatio, "_sign_GeneLists_ERF_",analysis,".csv")
write.table(sign_new_targets, f.path, sep=",", na="")
#Common genes with an fdr<0.05
sign_fdr_index <-  which(pvalues<0.05 & pvalues_fdr<0.05)
sign_common <- all_common[,sign_fdr_index]
sign_common_mat <- rbind( labels(pvalues_mat[,sign_fdr_index]), all_labels[sign_fdr_index], sign_common)
dimnames(sign_common_mat) <- list(c("Gene list", "Comparison", "common genes", rep("", dim(sign_new_targets)[1]-7)), c(1:length(sign_fdr_index)))
#sign_fdr_genes <- unique(sign_common[,!is.na(sign_common) & !sign_common==""])
#sign_fdr_genes
f.path = paste0(file.path(getwd(),"sigificant_genesets/"),dataset.name, "_", mitoRatio, "_sign_fdr_genes_ERF_",analysis,".csv")
write.table(sign_common_mat, f.path, sep=",", na="")
#sign_matrix <- matrix(data=unlist(strsplit(sign_new_targets[1,], " versus ")), nrow=2,ncol=10)
#rm(list=ls())
packrat::bundle(iRNA_project)
getwd()
setwd("/home/ismini/Documents/RNA_cor/iRNA/iRNA_project/")
packrat::bundle(iRNA_project)
setwd("/home/ismini/Documents/RNA_cor/iRNA/")
packrat::bundle(iRNA_project)
packrat::bundle(project = iRNA_project.Rproj)
packrat::bundle(project = iRNA_project.Rproj)
getwd()
packrat::bundle()
getwd()
}
genes_OldProt <- read.csv("./input_data/Frog_Clusters.csv", sep=",", header = T)
dim_genes_OldProt <- dim(genes_OldProt)
genes_OldProt <- apply(genes_OldProt, 2, toupper)
genes_OldProt <- as.data.frame(genes_OldProt)
getwd()
setwd("/home/ismini/Documents/RNA_cor/iRNA/iRNA_project/")
genes_OldProt <- read.csv("./input_data/Frog_Clusters.csv", sep=",", header = T)
dim_genes_OldProt <- dim(genes_OldProt)
genes_OldProt <- apply(genes_OldProt, 2, toupper)
genes_OldProt <- as.data.frame(genes_OldProt)
header2 <- sapply(read.csv("./input_data/New_Targets.csv", header=F, sep=",",
check.names=FALSE, nrow=2) , paste, collapse="_")
genes_batch <- read.csv("./input_data/New_Targets.csv", sep=",", header = F,
check.names=FALSE, skip=2, col.names=header2)
dim_genes_batch <- dim(genes_batch)
genes_batch <- apply(genes_batch, 2, toupper)
genes_batch <- as.data.frame(genes_batch)
header3 <- sapply(read.csv("./input_data/ChIPseq_genes.csv", header=F, sep=",",
check.names=FALSE, nrow=2) , paste, collapse="_")
genes_oldVSall <- read.csv("./input_data/ChIPseq_genes.csv", sep=",", header = F,
check.names=FALSE, skip=2, col.names=header3)
dim_genes_OldVSall <- dim(genes_oldVSall)
print( dim(genes_oldVSall))
genes_oldVSall <- apply(genes_oldVSall, 2, toupper)
genes_oldVSall <- as.data.frame(genes_oldVSall)
